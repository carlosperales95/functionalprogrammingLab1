(* 3 FRUIT *)

(* Part 1*)

datatype fruit = 
	Apple of real
	| Banana of real
	| Lemon of int;

(* Part 2 *)

(* sumPrice [] pa pb pl

   TYPE: list -> real -> real -> real -> real
   
   PRE:  Elements in the list should be of type fruit (Apple, Banana Lemon)
		 pa, pb and pl are the prices for each of these fruits and they must be real type.
   
   POST: Price of all the fruits in the list (Weight/number * product's price)
   
   EXAMPLES: sumPrice [Apple 2.12, Banana 4.00, Lemon 2] 0.80 1.03 0.40 = 5.978
			       sumPrice [Banana 1.20, Lemon 6, Lemon 2, Apple 0.39, Banana 0.36] 0.80 1.03 0.40 = 5.1188
             sumPrice [Apple 0.34, Lemon 7] 2.08 1.83 0.90 = 7.0072
*)

fun sumPrice [] pa pb pl = 0.00 
	| sumPrice (x::xs) pa pb pl = 
		let   
			fun pricing (Apple a) = a * pa
			| pricing (Banana b) = b * pb
			| pricing (Lemon l) = real l * pl     
		in
			pricing x + sumPrice xs pa pb pl
		end;
		
(* VARIATION *)

(* 4 TREE *)

(* Part 1 *)
			
datatype 'a ltree = Node of 'a * 'a ltree list;			
					
Node ("Tier0", [Node("Tier1", [Node ("Tier2", [Leaf ("Tier3")])])]);
val it = Node ("Tier0", [Node ("Tier1", [Node ("Tier2", [Leaf "Tier3"])])]

(* Part 2 *)
(* 2.a *)
(* count l

   TYPE: ''a ltree -> int
   
   PRE:  l is a ltree datatype
   
   POST: Returns the number of nodes in the tree.
   
   EXAMPLES: 
*)

fun count (Node (_, (x::xs))) = 1 + count xs;

(* 2.b *)
(* labels l

   TYPE: ''a ltree -> ''a list
   
   PRE: l is a ltree datatype
   
   POST: Returns a list with all the labels of the nodes
   
   EXAMPLES: 
*)

fun labels (Node (_, (_::xs))) = 1 + count xs;

(* 2.c *)
(* is_present l v

   TYPE: ''a ltree -> ''a -> bool
   
   PRE:  l is a ltree datatype and v has type ''a.
   
   POST: true if any of the nodes has that value as a label
		false if there's no node with tha value as a label
   
   EXAMPLES: 
*)

fun is_present (Leaf _) = 0
	|is_present (Node (_, (_::xs))) = 1 + count xs;

(* 2.d *)
(* height l

   TYPE: ''a ltree -> int
   
   PRE:  l is a ltree datatype
   
   POST: It returns the height of the tree (the furthest node level)
   
   EXAMPLES: 
*)

fun 'a height (Leaf _) = 0
	| height (Node ( _, (_::xs))) = 1 + height xs;
